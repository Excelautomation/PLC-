Package dk.aau.sw402F15.parser;

Helpers
ht  = 0x0009;
lf  = 0x000a;
ff  = 0x000c;
cr  = 0x000d;
sp  = ' ';

line_terminator = lf | cr | cr lf;

digit =	['0' .. '9'];
letter = ['a' .. 'z'] | ['A' .. 'Z'];

Tokens
white_space = (sp | ht | ff | line_terminator)+;

integer = (digit)+;
decimal = (digit)+ '.' (digit)+;

identifier = letter;// (letter | digit)*;

l_par = '(';
r_par = ')';
l_brc = '{';
r_brc = '}';

byte = 'byte';
bool = 'bool';
int = 'int';
long = 'long';
float = 'float';
double = 'double';
port = 'port';

plus_operator = '+';
minus_operator = '-';
mult_operator = '*';
div_operator = '/';
mod_operator = '%';
assignment_operator = '=';
equal_operator = '==';
not_equal_operator = '!=';

and_operator = '&&';
or_operator = '||';

if_keyword = 'if';
else_keyword = 'else';

for_keyword = 'for';

true_keyword = 'true';
false_keyword = 'false';

semi = ';';

Ignored Tokens
white_space;

Productions

program = 
  statements;

statements = 
  {multi} statement statements |
  {single} statement;

statement = 
  {declaration} declaration_statement semi;

variable_identifier = 
  {identifier} identifier;

type = 
  {byte} byte | 
  {bool} bool | 
  {int} int | 
  {long} long | 
  {float} float | 
  {double} double | 
  {port} port;

declaration_statement =
  {equalment_declaration} type variable_identifier assignment_operator expr;

expr = 
  {logic_expr} logic_expr;

logic_expr = 
  {compare_and} logic_expr and_operator logic_term |
  {compare_or} logic_expr or_operator logic_term |
  {term} logic_term;

logic_term = 
  {compare_equal} logic_value equal_operator logic_term | 
  {compare_not_equal} logic_value not_equal_operator logic_term | 
  {value} logic_value;

logic_value = 
  {true} true_keyword | 
  {false} false_keyword | 
  {identifier} variable_identifier | 
  {expr} l_par logic_expr r_par;