Package dk.aau.sw402F15.parser;

Helpers
ht  = 0x0009;
lf  = 0x000a;
ff  = 0x000c;
cr  = 0x000d;
sp  = ' ';

line_terminator = lf | cr | cr lf;

digit =	['0' .. '9'];
letter = ['a' .. 'z'] | ['A' .. 'Z'];

letter_or_digit = (letter | digit);

Tokens
l_par = '(';
r_par = ')';
l_brc = '{';
r_brc = '}';
semi = ';';
comma = ',';

// Operators
assignment_operator = '=';

plus_operator = '+';
minus_operator = '-';
mult_operator = '*';
div_operator = '/';
mod_operator = '%';

equal_operator = '==';
not_equal_operator = '!=';
and_operator = '&&';
or_operator = '||';

greater_than_operator = '>';
less_than_operator = '<';
greater_than_or_equal_operator = '>=';
less_than_or_equal_operator = '<=';

// Keywords
byte_keyword = 'byte';
bool_keyword = 'bool';
int_keyword = 'int';
long_keyword = 'long';
float_keyword = 'float';
double_keyword = 'double';
port_keyword = 'port';

if_keyword = 'if';
else_keyword = 'else';

for_keyword = 'for';
while_keyword = 'while';

true_keyword = 'true';
false_keyword = 'false';

// Literal
integer_literal = (digit)+;
decimal_literal = (digit)+ '.' (digit)+;

// Identifier
identifier = letter letter_or_digit*;

// White space
white_space = (sp | ht | ff | line_terminator)+;

Ignored Tokens
white_space;

Productions

program =
  {statement} statement program? |
  {function} function program?;

// Types
type = 
  {byte} byte_keyword | 
  {bool} bool_keyword | 
  {int} int_keyword | 
  {long} long_keyword | 
  {float} float_keyword | 
  {double} double_keyword | 
  {port} port_keyword;
  
// Scope
scope = 
  l_brc statements? r_brc;
  
// Function
functions =
  function functions?;

function =
  type identifier l_par parameters? r_par scope;
  
// Parameters
parameters =
  parameter additional_parameter?;

additional_parameter = 
  comma parameter;
  
parameter = 
  type identifier;
  
// Statements
statements = 
  statement statements?;

statement = 
  {declaration} declaration_statement semi |
  {assignment} assignment_statement semi |
  {conditional} conditional_statement;

// Declaration
declaration_statement =
  {declaration} type identifier |
  {declaration_assignment} type assignment_statement;

// Assignment  
assignment_statement = 
  {assignment} identifier assignment_operator expr;
  
// Conditional statement
conditional_statement =
  {if} if_statement;

if_statement =
  {if} if_keyword l_par expr r_par scope |
  {if_else} if_keyword l_par expr r_par scope else_statement;

else_statement = 
  {else} else_keyword scope |
  {else_if} else_keyword if_statement;

// Iterative statement
iterative_statement =
  {while} while_statement |
  {for} for_statement;
  
while_statement = 
  {while} while_keyword l_par expr r_par scope;

for_statement =
  {for} for_keyword l_par for_initializer for_condition for_iterator r_par scope;
  
for_initializer =
  {assignment} assignment_statement semi |
  {declaration} declaration_statement semi;

for_condition =
  {expr} expr semi;
  
for_iterator =
  {iterator} assignment_statement;
  
// Expression
expr = 
  {compare_and} expr and_operator expr2 |
  {compare_or} expr or_operator expr2 |
  {term} expr2 |
  {identifier} identifier;

expr2 =
  {compare_equal} expr2 equal_operator expr3 | 
  {compare_not_equal} expr2 not_equal_operator expr3 | 
  {term} expr3;

expr3 =
  {compare_greater} expr3 greater_than_operator expr4 |
  {compare_less} expr3 less_than_operator expr4 |
  {compare_greater_or_equal} expr3 greater_than_or_equal_operator expr4 |
  {compare_less_or_equal} expr3 less_than_or_equal_operator expr4 |
  {term} expr4;

expr4 =
  {add} expr4 plus_operator expr5 |
  {sub} expr4 minus_operator expr5 |
  {term} expr5;

expr5 =
  {multi} expr5 mult_operator expr_value |
  {div} expr5 div_operator expr_value |
  {mod} expr5 mod_operator expr_value |
  {term} expr_value;

expr_value = 
  {true} true_keyword | 
  {false} false_keyword |
  {value} value |
  {expr} l_par expr r_par;
  
value =
  {number} number |
  {negnumber} minus_operator number;
  
number =
  {integer} integer_literal |
  {decimal} decimal_literal;
